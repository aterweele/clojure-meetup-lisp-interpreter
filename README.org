* Intro questions

  - What programming language do you use day-to-day? Which languages
    are you familiar with?
  - are you familiar with lambda calculus?


* Why?
  If you're interested in implementing your own language, a simplified
  lisp is one of the easiest languages to implement.

  (non-goal: understand how Clojure works. I think that this
  interpreter is significantly different from how Clojure works.)
* Plan

  1. introduce the language
  2. show eval for the first time
  3. introduce predicate functions to recognize every element of the language
  4. start filling out the ~cond~ in eval


* The language
  our language will have numbers, some math functions, and anonymous
  functions.

  An *expression* in our language is one of
  + a *number*. Syntax: ~0~, ~-1~, ~1~, ~2~, etc.
  + the literal *nil*. Syntax: ~nil~
  + a *symbol*. Syntax: ~x~, ~y~, ~+~, etc.
  + a *special form*, which is one of
    - an *anonymous function*. Syntax: ~(fn (s₁ s₂ ...) e)~, where
      ~s₁~, ~s₂~, etc. are *symbols* and ~e~ is an *expression*
    - an *if expression*. Syntax: ~(if test consequent alternative)~,
      where ~test~, ~consequent~, and ~alternative~ are *expressions*.
    - a *do expression*. Syntax: ~(do e₁ e₂ ...)~, where ~e₁~, ~e₂~,
      etc. are *expressions*. Note that we can have any number of
      these expressions.
  + an *application* of something (a function, presumably) to
    arguments. Syntax: ~(e e₁ e₂ ...)~ where ~e~, ~e₁~, ~e₂~, etc. are
    *expressions*. Note that we can have any number of arguments.


  We'll represent these expressions using Clojure's lists, symbols,
  and numbers. In my usual Clojure work, using lists and symbols is
  rare compare to vectors, maps, keywords, and strings, so a quick
  refresher is in order. Usually in Clojure, if we evaluate ~(+ a 1)~,
  we'll add ~a~ and 1. But if we /quote/ that expression like ~'(+ a
  1)~, then we'll get a list of three things: the symbol ~+~, the
  symbol ~a~, and the number ~1~.

  This language doesn't have a lot, notably it does not have:
  booleans, let, def, or cons.

* a first look at ~eval~
  Note the form of ~eval~. We have a single ~cond~ expression, where
  we test for each kind of expression, then say how to evaluate each
  kind of expression. Let's walk through each case.
* numbers and nil
  numbers and nil evaluate to themselves. e.g. ~(eval 1 _whatever)~ is
  ~1~.
* symbols
  When we encounter a symbol, we look up what that symbol is bound to
  in the current environment.
* anonymous functions
  To evaluate an anonymous function, we simply capture the expression
  itself (which is a list like ~(fn (...) ...)~) and the current
  environment, and attach a tag to remember that this is a closure.
  
  A /closure/ is an anonymous function and the environment in which it
  is found. For example,

  #+begin_example
    (fn (x) (fn (y) (+ x y)))
            ^
  #+end_example

  consider the inner function. It refers to ~x~. When that inner
  function runs, it will need to know the value of ~x~. To do that,
  we'll construct a closure for the inner function: the environment of
  the closure will map ~x~ to the correct value.
* if expressions
  When we implement ~if~, we get to choose what values are logically
  true. I've chose to make ~nil~ logically false, and all other values
  logically true. To evaluate ~if~, we evaluate the test expression,
  test it for logical truth or falsity, and then evaluate the
  consequent or the alternative (the "then" and the "else").
* do expressions
  To evaluate ~do~, we evaluate all the subexpressions. ~do~ should
  evaluate to whatever the last subexpression evaluates to.
* application
  For application, we evaluate the first subexpression, which is
  the function we're applying, and the subsequent subexpressions, which
  are the arguments. Then we apply.

  Application comes in two flavors. If whatever we're applying is a
  builtin, this means we just apply a function from Clojure to the
  arguments: when we see a ~+~, use Clojure's ~+~, likewise ~-~, ~*~,
  ~/~, and whatever other functions from Clojure that we want.

  The second thing we can apply is a closure, which is the result of
  evaluating an anonymous function. In this case, we evaluate the body
  of that anonymous function in an environment which we augment by
  binding each argument of the anonymous function to the corresponding
  provided argument.
* +bugs+ exercises
  the interpreter does not support shadowing ~fn~ in some
  circumstances. Identify when, and implement a fix.
* Limitations of our interpreter

  https://www.reddit.com/r/LispMemes/comments/br8koy/metacircular_evaluator_irl/

  Why make a lisp when we already /had/ a lisp? This may feel a bit
  pointless. In fact, our lisp is poor in features compared to
  Clojure. So we took a capable language and made a less capable
  one. What was the point?

  (besides small stuff like getting to pick the syntax of our language.)

  Well, this is just a first step. From here, there are two directions
  we could take our learning in.

  One direction: alternate semantics. In SICP, the chapters after the
  interpreter ("metacircular evaluator", in SICP terms) are an
  interpreter for a [[https://sarabander.github.io/sicp/html/4_002e2.xhtml#g_t4_002e2][lazily evaluated language]] and [[https://sarabander.github.io/sicp/html/4_002e3.xhtml#g_t4_002e3]["nondeterministic
  computing"]]. So making our own interpreter means we get to choose
  exciting alternate semantics.

  To introduce the second direction, I'd like to note how much we
  didn't implement in our interpreter: to implement addition, we used
  Clojure's ~+~. To implement the environment, we used Clojure data
  structures. Nowhere did we do any kind of garbage collection – we
  didn't need to because as our interpreter runs, Clojure data
  structures are created, then fall out of scope, then get garbage
  collected. All of these concerns were addressed thanks to working in
  Clojure (or equivalently, any garbage-collected language with data
  structures and functions to implement the interpreted language's
  functions). So the second potential direction for our learning is
  implementing more of this stuff. This includes how to represent
  values in memory, compiling lisp to assembly or bytecode, and
  garbage collection.

* Further reading:

  [[https://github.com/kanaka/mal][mal]] (make a lisp) by Joel Martin

  [[https://sarabander.github.io/sicp/html/4_002e1.xhtml#g_t4_002e1][Structure and Interpretation of Computer Programs: The Metacircular
  Evaluator]] by Abelson and Sussman

  [[https://norvig.com/lispy.html][(How to Write a (Lisp) Interpreter (in Python))]] by Peter Norvig
  
  [[https://www.coursera.org/learn/programming-languages-part-b][Free course: Programming Languages, Part B.]] That one of homeworks is to create working LISP interpreter 

  [[https://www.youtube.com/watch?v=OyfBQmvr2Hc&t=3970s]["The Most Beautiful Program Ever Written"]] by William Byrd

  [[https://craftinginterpreters.com/][Crafting Interpreters]] by Robert Nystrom

  [[https://bernsteinbear.com/blog/compiling-a-lisp-0/][Compiling a Lisp]] by Max Bernstein

  [[https://www.youtube.com/watch?v=BcC3KScZ-yA][Clever Representations & Small Optimizations in Chez Scheme]] by Andy
  Keep. Includes a good explanation of representing values in memory.
